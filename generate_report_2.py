import os
from datetime import timedelta, date
from fpdf import FPDF
from stats_generation import generate_stats, generate_graph


class PDF(FPDF):
    def __init__(self, site_name='Construction Site', start_date=date.today() - timedelta(days=7)):
        super().__init__()
        # Initialise data to go in report header
        self.site_name = site_name
        self.start_date = start_date
        self.end_date = start_date + timedelta(days=7)

    def header(self):
        # Add report banner
        self.image('resources/Banner_Thin_1.png', 0, 0, w=210)  # Set logo

        # Header settings
        self.set_font('Helvetica', 'B', 30)  # Set font
        self.set_fill_color(118, 113, 113)  # Set fill colour
        self.set_text_color(255, 192, 0)

        # Position header
        self.set_xy(0, self.get_y() + 4)
        self.cell(210, 4, '', 0, 2, 'C', True)

        # Site name
        self.cell(210, 14, self.site_name, 0, 2, 'C', True)
        self.cell(210, 1, '', 0, 2, 'C', True)

        # Date range
        self.set_font('Arial', 'I', 12)
        self.cell(210, 5, '{} to {}'.format(self.start_date, self.end_date), 0, 2, 'C', True)
        self.cell(210, 4, '', 0, 2, 'C', True)

    def footer(self):
        # Footer settings
        self.set_fill_color(118, 113, 113)  # Set fill colour
        self.set_text_color(255, 255, 255)  # Set text colour
        self.set_font('Arial', 'I', 9)  # Set font

        # Position footer
        self.set_xy(0, -13)

        # Fill colour of footer
        self.cell(210, 13, '', 0, 0, 'C', True)
        self.set_y(-13)

        # "Generated by Sightdata" text
        self.cell(0, 10, 'Generated by Sighdata', 0, 0, 'R')

    def stat_text(self, metrics_data):
        """Create metrics text for exclusion zone detection and loose object detection modules and add them to the
        report.

        Parameters:
        metrics_data (list): Each row represents one module:
            column 1: ['Exclusion Zone Detection', no. of detected breaches, no. of close proximity warnings,
                percent of compliant events, 'Detected Breaches', 'Close Proximity Warnings', 'Percent Compliant']
            column 2: ['Loose Object Detection', total no. of loose objects detected, no. of loose objects remaining,
                'Loose Objects Detected', 'Objects remaining']

        Returns:
        None
       """

        # Get y coordinate of start of Metrics section in report
        y_main = self.get_y() + 7
        self.set_xy(10, y_main)

        # Add 'Site Metrics' heading
        self.set_fill_color(255, 192, 0)
        self.set_font('Helvetica', 'B', 30)
        self.cell(70, 18, '', 0, 2, 'C', True)
        self.cell(70, 10, 'Site', 0, 2, 'C', True)
        self.cell(70, 5, '', 0, 2, 'C', True)
        self.cell(70, 10, 'Metrics', 0, 2, 'C', True)
        self.cell(70, 18, '', 0, 2, 'C', True)

        # Add 'Exclusion Zone' heading
        self.set_font('Helvetica', 'B', 14)
        self.set_xy(90, y_main - 2)
        self.multi_cell(110, 10, metrics_data[0][0], 0, 'C')
        self.set_x(90)

        # Add 'Exclusion Zone' Metrics
        self.set_font('Helvetica', 'B', 24)
        self.cell(35, 10, metrics_data[0][1], 0, 0, 'C')
        self.cell(2)
        self.cell(36, 10, metrics_data[0][2], 0, 0, 'C')
        self.cell(2)
        self.cell(35, 10, metrics_data[0][3], 0, 0, 'C')

        # Get y coordinate for 'Exclusion Zone' labels
        y = self.get_y() + 10

        # Add 'Exclusion Zone' labels
        self.set_font('Helvetica', '', 9)
        self.set_xy(90, y)
        self.multi_cell(35, 4, metrics_data[0][4], 0, 'C')
        self.set_xy(127, y)
        self.multi_cell(36, 4, metrics_data[0][5], 0, 'C')
        self.set_xy(165, y)
        self.multi_cell(35, 4, metrics_data[0][6], 0, 'C')

        # Add divider line between Exclusion Zone data and Loose Object Detection data
        self.set_fill_color(211, 211, 211)
        self.set_xy(90, y_main + 32)
        self.cell(110, 1, '', 0, 2, 'C', True)

        # Add 'Loose Object Detection' heading
        self.set_font('Helvetica', 'B', 14)
        self.set_xy(90, self.get_y() + 4)
        self.multi_cell(110, 10, metrics_data[1][0], 0, 'C')

        # Add 'Loose Object Detection' metrics
        self.set_font('Helvetica', 'B', 24)
        self.set_x(103)
        self.cell(36, 10, metrics_data[1][1], 0, 0, 'C')
        self.cell(14)
        self.cell(36, 10, metrics_data[1][2], 0, 0, 'C')

        # Get y coordinate for 'Loose Object Detection' labels
        y = self.get_y() + 10

        # Add 'Loose Object Detection' labels
        self.set_font('Helvetica', '', 9)
        self.set_xy(103, y)
        self.multi_cell(36, 4, metrics_data[1][3], 0, 'C')
        self.set_xy(153, y)
        self.multi_cell(36, 4, metrics_data[1][4], 0, 'C')

        # Set x and y coordinates to end of Metrics section
        self.set_xy(0, y_main + 68)

    def add_graphs(self, graph_1_path, graph_2_path, graph_3_path, delete_files=True):
        """Add 3 graphs to report"""

        # Add divider to report
        self.set_fill_color(211, 211, 211)
        self.cell(210, 1, '', 0, 2, 'C', True)

        # Get y coordinate of start of the graph section in report
        y_main = self.get_y() + 7

        # Add 'Average Incidents by Hour' heading and graph
        self.set_font('Arial', 'B', 16)
        self.set_xy(10, y_main)
        self.cell(190, 7, 'Average Incidents by Hour', 0, 0, 'C')
        self.image(graph_1_path, 10, self.get_y() + 10, 190)

        # Add divider between graphs
        self.set_xy(0, self.get_y() + 69)
        self.cell(210, 1, '', 0, 2, 'C', True)
        self.set_xy(10, self.get_y() + 7)

        # Add remaining graph headings
        self.cell(90, 7, 'Incidents by Camera', 0, 0, 'C')
        self.cell(10)
        self.cell(90, 7, 'Incidents by Date', 0, 0, 'C')

        # Add graphs
        y = self.get_y()
        self.rect(105, y - 7, 1, 92, 'F')
        self.image(graph_2_path, 10, y + 12, 90)
        self.image(graph_3_path, 110, y + 10, 90)

        if delete_files:
            # Remove graphs from files
            os.remove(graph_1_path)
            os.remove(graph_2_path)
            os.remove(graph_3_path)


# Generate data and tables
data = generate_stats('resources/data3.json')
generate_graph('resources/data3.json', 'output/graph_by_date.png')
generate_graph('resources/data3.json', 'output/graph_by_hour.png', 'hour', 'line2')
generate_graph('resources/data3.json', 'output/graph_by_camera.png', 'camera', 'barh')

# Generate report
pdf = PDF('Emma\'s Construction Site', date.today() - timedelta(days=7))  # Initiate PDF class
pdf.add_page()  # Add a new page
pdf.stat_text(data)  # Add metrics boxes to report
pdf.add_graphs('output/graph_by_hour.png', 'output/graph_by_camera.png',
               'output/graph_by_date.png')  # Add graphs to report
pdf.output('output/report_v2.1.pdf', 'F')  # Save report in files
